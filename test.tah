// function which returns a list
fun testList() {
  return [1, 2, 3, 4, 5];
}

print testList()[1:5];

print testList() + [100];

// function which takes a list as an argument
fun testList2(list) {
  return list[2];
}

var ddd = 4.4;
print ddd;

print 4.3+5.7;

// Fibonacci function
fun fib(n)
precondition: n >= 0
{
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

// list of functions
var list = [testList, fib];

// call the function in the list
print "T";
print list[0]()[2];
print list[0];

// are funcitons first class citizens?
// let's find out by passing a function as an argument
fun testFunction(func) {
  return func(6);
}

print testFunction(fib);

// assign a function to a variable
var fibVar = fib;
print fibVar(6);
print fib(testFunction(fib));

print "h"+"d";

// Regular code block
var x = 10;
print "Fib(x): " + fib(x);

// Test block to check Fibonacci function
test "checking this out" {
  assertion: fib(0) == 0;
  assertion: fib(1) == 1;
  assertion: fib(2) == 1;
  assertion: fib(3) == 2;
  assertion: fib(4) == 3;
  assertion: fib(5) == 5;
}
