fun isEven(n) {
  while (n >= 2) {
    n = n - 2;
  }
  return n == 0;
}

var dictwithfunc = { "key1": 1, "key2": 2, "key3": 3, true: false, nil:5, "fib": isEven, isEven: isEven };
print dictwithfunc["key1"];
print dictwithfunc[true];
print dictwithfunc[nil];
print dictwithfunc["fib"](4);
print dictwithfunc["fib"];
print dictwithfunc[isEven];
print dictwithfunc[isEven](5);
print dictwithfunc["isEven"](4);

print len("Hello");
var str = "hello";
print len(str);
print str[1];

fun filterEven(arr) {
  var oddArr = [];
  for (var i = 0; i < len(arr); i = i + 1) {
    if (isEven(arr[i])) {
      oddArr = oddArr + [arr[i]];
    }
  }
  return oddArr;
}

print filterEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);


var ddd = 4.4;
print ddd;

print 4.3+5.7;

// Fibonacci function
fun fib(n)
precondition: n >= 0
{
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

// list of functions
var list = [fib];

// call the function in the list
print "T";
print list[0](7);
print list[0];

// are funcitons first class citizens?
// let's find out by passing a function as an argument
fun testFunction(func) {
  return func(6);
}

print testFunction(fib);

// assign a function to a variable
var fibVar = fib;
print fibVar(6);
print fib(testFunction(fib));

print "h"+"d";

// Regular code block
var x = 10;
print "Fib(x): " + fib(x);

// Test block to check Fibonacci function
test "checking this out" {
  assertion: fib(0) == 0;
  assertion: fib(1) == 1;
  assertion: fib(2) == 1;
  assertion: fib(3) == 2;
  assertion: fib(4) == 3;
  assertion: fib(5) == 5;
}
